{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Input","props","type","value","i","onChange","e","sI","target","placeholder","onClick","sR","toFixed","r","App","useState","input","setInput","result","setResult","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAgBA,SAASA,EAAMC,GACb,OACE,qCACE,uBAAOC,KAAK,SAASC,MAAQF,EAAMG,EAAIC,SAAW,SAACC,GAAD,OAAOL,EAAMM,GAAGD,EAAEE,OAAOL,QAASM,YAAY,eAChG,gCACA,wBAAQC,QAAU,kBAAMT,EAAMU,IAAc,KAAVV,EAAMG,GAAUQ,QAAQ,KAA1D,0BACA,wBAAQF,QAAU,kBAAMT,EAAMU,IAAIV,EAAMG,EAAI,MAAMQ,QAAQ,KAA1D,6BAED,uBAAOT,MAAQF,EAAMY,EAAIJ,YAAY,mBAK3BK,MA1Bf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEA,OACE,qCACE,+EACA,cAACnB,EAAD,CAAOI,EAAGY,EAAOT,GAAIU,EAAUJ,EAAGK,EAAQP,GAAIQ,IAC9C,oFCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0383c2b5.chunk.js","sourcesContent":["import React, { useState }from 'react';\nimport './App.css';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n\n  return (\n    <>\n      <h1>Convert Inches to centimeters and vice versa.</h1>\n      <Input i={input} sI={setInput} r={result} sR={setResult}/>\n      <p>(for those desperate to know: 1 Inch = 2.54 cm)</p>\n    </>\n  )\n}\n\nfunction Input(props) {\n  return (\n    <>\n      <input type=\"number\" value={ props.i } onChange={ (e) => props.sI(e.target.value) } placeholder=\"to convert\" />\n      <div>\n      <button onClick={ () => props.sR((props.i * 2.54).toFixed(2)) }>Inches to cm</button>\n      <button onClick={ () => props.sR((props.i / 2.54).toFixed(2)) }>cm to Inches</button>\n     </div>\n     <input value={ props.r } placeholder=\"result here\"/>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}